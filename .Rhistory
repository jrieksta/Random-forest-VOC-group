######load libraries and data ########
library(randomForest)
library(tidyverse)
.libPaths("C:/R Packages")
suppressPackageStartupMessages({
library(randomForest)
library(tidyverse)
library(ggplot)
})
library(randomForest)
library(tidyverse)
library(ggplot)
######load libraries and data ########
.libPaths("C:/R Packages")
library(randomForest)
library(tidyverse)
library(ggplot)
library(ggpubr)
#load data
voc<-read.table("08022021_Narsarsuaq_spread",head = TRUE, sep=",")
setwd("C:/Users/lcm767/OneDrive - Københavns Universitet/Desktop/Projects/Repositories/Random-forest-VOC-group")
#load data
setwd("C:/Users/lcm767/OneDrive - Københavns Universitet/Desktop/Projects/Repositories/Random-forest-VOC-group")
voc<-read.table("08022021_Narsarsuaq_spread",head = TRUE, sep=",")
voc<-read.table("08022021_Narsarsuaq_spread.csv",head = TRUE, sep=",")
View(voc)
#transform data into relative proportions
names(voc)
e<-voc[,-c(1, 1:15)] #remove non compound rows
prop<-cbind(id = e[, 1], e[, -1]/rowSums(e[, -1]))
propdatanstd<-cbind(voc[,c(1, 1:15)],prop) #bind back id and info data
propdatanstd
names(date)
names(propdatanstd)
propdatanstd$Measurement
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(measurements=c("70719","90719","150719","180719","230719","240719","300719","310719" ))
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(measurements==c("70719","90719","150719","180719","230719","240719","300719","310719" ))
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(measurement==c("70719","90719","150719","180719","230719","240719","300719","310719" ))
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719","150719","180719","230719","240719","300719","310719" ))
View(herbivory)
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719","150719","180719","230719","240719","300719","310719" ))
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719","150719","180719","230719","240719","300719","310719"))
propdatanstd$Measurement=as.factor(propdatanstd$Measurement)
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719","150719","180719","230719","240719","300719","310719"))
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719","150719","180719","230719"))
e<-voc[,-c(1, 1:15)] #remove non compound rows
prop<-cbind(id = e[, 1], e[, -1]/rowSums(e[, -1]))
propdatanstd<-cbind(voc[,c(1, 1:15)],prop) #bind back id and info data
names(propdatanstd)
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719","150719","180719","230719"))
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719"))
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719"))
herbivory <-subset (propdatanstd, Measurement %in% c("70719","90719","150719","180719","230719","240719","300719","310719"))
View(herbivory)
View(propdatanstd)
#transform data into relative proportions
names(voc)
e<-voc[,-c(1, 1:15)] #remove non compound rows
prop<-cbind(id = e[, 1], e[, -1]/rowSums(e[, -1]))
View(prop)
prop.table(e)
View(prop)
prop=prop.table(e)
View(prop)
prop=prop.table(voc)
#transform data into relative proportions
names(voc)
voc[is.na(voc)] <- 0
#transform data into relative proportions
names(voc)
e=voc[,-c(1, 1:15)] #remove non compound rows
prop<-cbind(id = e[, 1], e[, -1]/rowSums(e[, -1]))
propdatanstd<-cbind(voc[,c(1, 1:15)],prop) #bind back id and info data
View(propdatanstd)
prop1=prop.table(voc)
e=voc[,-c(1, 1:15)] #remove non compound rows
prop1=prop.table(e)
View(prop1)
#transform data into relative proportions
names(voc)
e=voc[,-c(1, 1:14)] #remove non compound rows
View(e)
prop1=prop.table(e)
prop<-cbind(id = e[, 1], e[, -1]/rowSums(e[, -1]))
propdatanstd<-cbind(voc[,c(1, 1:14)],prop) #bind back id and info data
View(propdatanstd)
write.csv(voc, "test.csv")
e=voc[,-c(1, 1:15)] #remove non compound rows
prop1=prop.table(e)
e=voc[,-c(1, 1:14)] #remove non compound rows
View(propdatanstd)
#subset data, in this example, let´s take four campaigns,
#where I had mimicked insect herbivory treatment and control, and warming and control treatments
herbivory <-propdatanstd %>%
filter(Measurement==c("70719","90719","150719","180719","230719","240719","300719","310719"))
herbivory <-subset (propdatanstd, Measurement %in% c("70719","90719","150719","180719","230719","240719","300719","310719"))
View(herbivory)
herbivory_1 <-subset (propdatanstd, Measurement %in% c("70719","90719","150719","180719","230719","240719"))
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
sqrt(286)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
m1 <-randomForest( x=herbivory_1[, 15:15], mtry=17, importance=T, do.trace=1000, ntree=1000, proximity=T)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
m1 <-randomForest( x=herbivory_1$Herbivory.y[, 15:15], mtry=17, importance=T, do.trace=1000, ntree=1000, proximity=T)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
m1 <-randomForest( x=herbivory_1$Herbivory.y[, 15:301], mtry=17, importance=T, do.trace=1000, ntree=1000, proximity=T)
View(herbivory)
names(herbivory_1)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
m1 <-randomForest( x=herbivory_1$Herbivory.y[, 16:301], mtry=17, importance=T, do.trace=1000, ntree=1000, proximity=T)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
m1 <-randomForest( x=herbivory_1[, 16:301], mtry=17, importance=T, do.trace=10000, ntree=1000, proximity=T)
plot(m1)
print(m1)
m1$predicted
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
m1 <-randomForest( x=herbivory_1$Herbivory.x[, 16:301], mtry=17, importance=T, do.trace=10000, ntree=1000, proximity=T)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
namesherbivory_1)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(286) 16.91153 = 17
#mtree=how many trees RF will build
#do trace= visual
names(herbivory_1)
m1 <-randomForest( x=herbivory_1$Herbivory.x[, 17:301], mtry=17, importance=T, do.trace=10000, ntree=1000, proximity=T)
voc<-read.table("09022021_Paddus_RF.csv",head = TRUE, sep=",")
voc[is.na(voc)] <- 0
#transform data into relative proportions
names(voc)
e=voc[,-c(1, 1:42)] #remove non compound rows
prop<-cbind(id = e[, 1], e[, -1]/rowSums(e[, -1]))
propdatanstd<-cbind(voc[,c(1, 1:42)],prop) #bind back id and info data
total<-propdatanstd
total$Date
total$Date[total$Date=="30.06.2018"] <- "June 30"
total$Date[total$Date=="05.07.2018"] <- "July 5"
total$Date[total$Date=="11.07.2018"] <- "July 11"
t1<- subset(total, Date==c("June 30"))
t2<- subset(total, Date==c("July 5"))
t3<- subset(total, Date==c("July 11"))
t1<- subset(total, Date==c("June 30"))
t2<- subset(total, Date==c("July 5"))
t3<- subset(total, Date==c("July 11"))
names(voc)
263-42
sqrt(221)
names(t2)
#unsupervised RF
#mtry=sqrt( or # of VOC) how many compound each time will be excluded
#sqrt(221) 14.86607 = 15
#mtree=how many trees RF will build
#do trace= visual, see the progress after every 1000 trees
names(total)
b.rf<-randomForest(t2$herbivory ~ ., data=t2[, 45:263], mtry=15, importance=T, do.trace=1000, ntree=1000, proximity=T)
t2_total<-randomForest(t2$herbivory ~ ., data=t2[, 45:263], mtry=15, importance=T, do.trace=1000, ntree=1000, proximity=T)
t2_total<- randomForest(t2[, 45:263], y=as.factor(t2$herbivory), proximity=TRUE, mtry=15, importance=T, do.trace=1000, ntree=1000)
t2_total<- randomForest(t2$herbivory[, 45:263], y=as.factor(t2$herbivory), keep.forest=T, proximity=TRUE, mtry=15, importance=T, do.trace=10000, ntree=100000)
t2_total<- randomForest(t2[, 45:263], y=as.factor(t2$herbivory), proximity=TRUE, mtry=15, importance=T, do.trace=1000, ntree=1000)
t2_total<- randomForest(t2[, 45:263], y=as.factor(t2$herbivory), proximity=TRUE, mtry=15, importance=T, do.trace=1000, ntree=10000)
names(t2)
classification <- cbind(b[1:21], t2_total$predicted)
classification <- cbind(t2[1:21], t2_total$predicted)
classification
classification <- cbind(t2[21], t2_total$predicted)
classification
varimp <- importance(t2_total, scale=TRUE)[,3]
sort(varimp)
varImpPlot(t2_total)
#obtain proximity matrix
t2.prox<-cmdscale(1-t2_total$proximity)
# as data frame
t2_df<-as.data.frame(t2.prox, row.names = NULL)
t2.prox
t2_df
#defauld MDS plot
plot(b.mds, col=c("black", "magenta")[t2$herbivory], pch=16)
#defauld MDS plot
plot(t2_total, col=c("black", "magenta")[t2$herbivory], pch=16)
#defauld MDS plot
plot(t2.rox, col=c("black", "magenta")[t2$herbivory], pch=16)
#defauld MDS plot
plot(t2.prox, col=c("black", "magenta")[t2$herbivory], pch=16)
#obtain proximity matrix
t2.prox<-cmdscale(1-t2_total$proximity)
# as data frame
t2_df<-as.data.frame(t2.prox, row.names = NULL)
#defauld MDS plot
plot(t2.prox, col=c("black", "magenta")[t2$herbivory], pch=16)
names(t2)
plot(t2_total)
print(t2_total)
plot(t2_total)
t2_total<- randomForest(t2[, 45:263], y=as.factor(t2$herbivory), proximity=TRUE, mtry=15, importance=T, do.trace=1000, ntree=10000)
plot(t2_total)
print(t2_total)
t2_total$predicted
t2_total$predicted
classification <- cbind(t2[21], t2_total$predicted)
classification
#obtain proximity matrix
t2.prox<-cmdscale(1-t2_total$proximity)
#defauld MDS plot
plot(t2.prox, col=c("black", "magenta")[t2$herbivory], pch=16)
View(t2.prox)
t2_df<-as.data.frame(t2.prox, row.names = NULL)
#defauld MDS plot
plot(t2.df, col=c("black", "magenta")[t2$herbivory], pch=16)
t2_df<-as.data.frame(t2.prox, row.names = NULL)
#defauld MDS plot
plot(t2_df, col=c("black", "magenta")[t2$herbivory], pch=16)
#defauld MDS plot
plot(t2_df, col=c("black", "magenta")[t2$herbivory], pch=16))
#defauld MDS plot
plot(t2.prox, col=c("black", "magenta")[t2$herbivory], pch=16)
#defauld MDS plot
plot(t2.prox, col=c("black", "magenta")[t2$herbivory], pch=16)
#obtain proximity matrix
t2.prox<-cmdscale(1-t2_total$proximity)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
t2$herbivory=as.factor(t2$herbivory)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
#defauld MDS plot
plot(t2.prox, col=c("black", "magenta")[t2$herbivory], pch=16)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
legend("topleft", pch = c(17,16), col=c("orange", "#3366FF"), c("control", "herbivory"), cex =1.2)
t2_df<-as.data.frame(t2.prox, row.names = NULL)
ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme
my_theme=theme(text = element_text(size=15),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13),
axis.title.x=element_text(size = 13),
axis.title.y=element_text(size = 13)
)
ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme
ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme
ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme+
stat_ellipse(aes(x = V1,y=V2,fill=factor(t2$herbivory)),
geom="polygon",level=0.95,alpha=0.2)+guides(fill = FALSE)   +
scale_fill_manual(values=c("#440154FF", "#DCE318FF"))
#make proximity matrix as dataframe
t2_df<-as.data.frame(t2.prox, row.names = NULL)
t2_non_ell=ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme
t2_non_ell
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
legend("topleft", pch = c(17,16), col=c("orange", "#3366FF"), c("control", "herbivory"), cex =1.2)
#with ellipse
t2_ell=ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme+
stat_ellipse(aes(x = V1,y=V2,fill=factor(t2$herbivory)),
geom="polygon",level=0.95,alpha=0.2)+guides(fill = FALSE)   +
scale_fill_manual(values=c("#440154FF", "#DCE318FF"))
t2_ell
t2_total_ns<- randomForest(t2[, 45:263], proximity=TRUE, mtry=15, importance=T, do.trace=1000, ntree=10000)
plot(t2_total_ns) #we see high error, model has not learned enough with 10 000 trees, let´s increase the # of trees
print(t2_total_ns) # returns the model output, that shows the model, out-of-bag-error, and error for each class (control, herbivory)
classification <- cbind(t2[21], t2_total_ns$predicted) #we can make a table to see RF´s predicted and our assigned samples
classification
classification <- cbind(t2[21], t2_total_ns$predicted) #we can make a table to see RF´s predicted and our assigned samples
classification
varimp <- importance(t2_total_ns, scale=TRUE)[,3] #variable importance
sort(varimp)
#obtain proximity matrix
t2.prox_ns<-cmdscale(1-t2_total_ns$proximity)
#obtain proximity matrix
t2.prox_ns<-cmdscale(1-t2_total_ns$proximity)
# as data frame
t2_df_ns<-as.data.frame(t2.prox_ns, row.names = NULL)
prox <- t2_total_ns$proximity
prox
t2.prox_ns
prox <- t2_total_ns$proximity
prox <- t2_total$proximity
prox
View(prox)
plot(prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
legend("topleft", pch = c(17,16), col=c("orange", "#3366FF"), c("control", "herbivory"), cex =1.2)
MDSplot(t2_total, t2$herbivory)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
MDSplot(t2_total, t2$herbivory)
MDSplot(t2_total, t2$herbivory)
#defauld MDS plot = Plot the scaling coordinates of the proximity matrix from randomForest.
MDSplot(t2_total, t2$herbivory)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
#defauld MDS plot based on RF proximity  = Plot the scaling coordinates of the proximity matrix from randomForest.
MDSplot(t2_total, t2$herbivory)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
legend("topleft", pch = c(17,16), col=c("orange", "#3366FF"), c("control", "herbivory"), cex =1.2)
#nicer ggplot option
my_theme=theme(text = element_text(size=15),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13),
axis.title.x=element_text(size = 13),
axis.title.y=element_text(size = 13)
)
#make proximity matrix as dataframe
t2_df<-as.data.frame(t2.prox, row.names = NULL)
#without ellipse
t2_non_ell=ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme
t2_non_ell
t2_ell=ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme+
stat_ellipse(aes(x = V1,y=V2,fill=factor(t2$herbivory)),
geom="polygon",level=0.95,alpha=0.2)+guides(fill = FALSE)   +
scale_fill_manual(values=c("#440154FF", "#DCE318FF"))
t2_ell
#obtain the proximity
t2.prox<-cmdscale(1-t2_total$proximity)
MDSplot(t2_total, t2$herbivory)
MDSplot(t2_total, t2$herbivory)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
legend("topleft", pch = c(17,16), col=c("orange", "#3366FF"), c("control", "herbivory"), cex =1.2)
t2.prox_ns<-cmdscale(1-t2_total_ns$proximity) #cmdscale must be a distance matrix, so 1 - proximity can be used
MDSplot(t2_total, t2$herbivory)
MDSplot(t2_total_ns, t2$herbivory)
MDSplot(t2_total, t2$herbivory)
MDSplot(t2_total, t2$herbivory)
MDSplot(t2_total_ns, t2$herbivory)
plot(t2.prox_ns, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
legend("topleft", pch = c(17,16), col=c("orange", "#3366FF"), c("control", "herbivory"), cex =1.2)
plot(t2.prox, col=c("orange", "#3366FF")[t2$herbivory], pch = c( 17,16)[as.numeric(t2$herbivory)],cex=2)
legend("topleft", pch = c(17,16), col=c("orange", "#3366FF"), c("control", "herbivory"), cex =1.2)
#make proximity matrix as dataframe
t2_df<-as.data.frame(t2.prox, row.names = NULL)
t2_df_ns<-as.data.frame(t2.prox_ns, row.names = NULL)
t2_non_ell=ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5 supervised RF")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme
t2_non_ell
t2_non_ell_ns=ggplot(t2_df_ns, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5 unsupervised RF")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme
t2_non_ell_ns
t2_ell_ns=ggplot(t2_df_ns, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5 unsupervised RF")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme+
stat_ellipse(aes(x = V1,y=V2,fill=factor(t2$herbivory)),
geom="polygon",level=0.95,alpha=0.2)+guides(fill = FALSE)   +
scale_fill_manual(values=c("#440154FF", "#DCE318FF"))
t2_ell_ns
t2_ell=ggplot(t2_df, aes(x=V1, y=V2, color=t2$herbivory))+
geom_point(aes(shape=t2$herbivory, color=t2$herbivory),size=4.5)+theme_classic()+
labs(fill = "Herbivory")+
ggtitle("July 5 supervised RF")+
scale_color_manual(values=c("#440154FF", "#DCE318FF"))+my_theme+
stat_ellipse(aes(x = V1,y=V2,fill=factor(t2$herbivory)),
geom="polygon",level=0.95,alpha=0.2)+guides(fill = FALSE)   +
scale_fill_manual(values=c("#440154FF", "#DCE318FF"))
t2_ell
merge<-ggarrange(t2_non_ell,t2_non_ell_ns,t2_ell,t2_ell_ns,nrow=2, ncol=2, common.legend = TRUE,labels = c("A", "B", "C", "D"))
merge
varimp.df <-as.data.frame(varimp)
varimp.df <- tibble::rownames_to_column(varimp.df, "VOC")
varimp.df <-as.data.frame(varimp)
varimp.df <- tibble::rownames_to_column(varimp.df, "VOC")
varimp.df<-varimp.df %>% arrange(desc(varimp), VOC)
t2_plot<-varimp.df[1:20,]
names(t2_plot)[2] <- "Variable_importance"
ggplot(data=t2_plot, aes(x=Variable_importance, y=VOC)) +theme_classic()+
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
t2_graph=ggplot(data=t2_plot, mapping = aes(x = reorder(VOC,Variable_importance), Variable_importance), col=Variable_importance)+
theme_classic()+geom_bar(stat="identity")+
coord_flip()+scale_fill_brewer(palette="Set2")+ggtitle("July 5")+
labs(x=expression(VOC),
y=expression(Variable~importance))+theme(legend.position = "none")+
theme(panel.background = element_rect(colour = "black", size=1, fill=NA))
t2_graph
varimp <- importance(t2_total, scale=TRUE)[,3] #variable importance
########## nicer visualisation of Variable importance ############
#VARIABLE IMPORTANCE GRAPHS
varimp <- importance(t2_total, scale=TRUE)[,3]
varimp.df <-as.data.frame(varimp)
varimp.df <- tibble::rownames_to_column(varimp.df, "VOC")
varimp.df<-varimp.df %>% arrange(desc(varimp), VOC)
########## nicer visualisation of Variable importance ############
#VARIABLE IMPORTANCE GRAPHS
varimp <- importance(t2_total, scale=TRUE)[,3]
varimp
varimp.df <-as.data.frame(varimp)
varimp.df
varimp.df
varimp.df <- tibble::rownames_to_column(varimp.df, "VOC")
varimp.df
